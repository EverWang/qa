version: '3.8'

services:
  # 后端服务
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - PORT=8080
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    volumes:
      - ./server:/app
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 管理端前端
  admin-web:
    build:
      context: ./admin-web
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./admin-web/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - qa-network
    depends_on:
      - server
    restart: unless-stopped

  # 小程序端前端
  miniprogram:
    build:
      context: ./miniprogram
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./miniprogram/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - qa-network
    depends_on:
      - server
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "8081:80"
    volumes:
      - ./nginx/local.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - qa-network
    depends_on:
      server:
        condition: service_healthy
      admin-web:
        condition: service_started
      miniprogram:
        condition: service_started
    restart: unless-stopped

networks:
  qa-network:
    driver: bridge

volumes:
  server_data:
    driver: local