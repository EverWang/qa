# Docker Compose 配置文件 - Windows 环境优化版
# 刷刷题项目 - 适用于 Windows + WSL2 环境

version: '3.8'

services:
  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: qa-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/windows.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - admin-web
      - miniprogram
      - server
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.qa.service=nginx"
      - "com.qa.description=Reverse proxy and load balancer"

  # 后端服务 (Go)
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.windows
      args:
        - GO_VERSION=1.21
        - CGO_ENABLED=0
    container_name: qa-server
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - PORT=8080
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-qa_database}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost,http://localhost:3000,http://localhost:5173}
    volumes:
      - ./server:/app
      - qa-go-cache:/go/pkg/mod
      - qa-go-build:/root/.cache/go-build
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.qa.service=server"
      - "com.qa.description=Go backend API server"

  # 管理端 (Vue3 + Element Plus)
  admin-web:
    build:
      context: ./admin-web
      dockerfile: Dockerfile.windows
      args:
        - NODE_VERSION=18
        - BUILD_ENV=production
    container_name: qa-admin-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-刷刷题管理后台}
    volumes:
      - ./admin-web:/app
      - qa-node-modules-admin:/app/node_modules
      - qa-npm-cache:/root/.npm
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.qa.service=admin-web"
      - "com.qa.description=Admin web interface"

  # 小程序端 (Vue3 + Uni-app)
  miniprogram:
    build:
      context: ./miniprogram
      dockerfile: Dockerfile.windows
      args:
        - NODE_VERSION=18
        - BUILD_ENV=production
    container_name: qa-miniprogram
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-刷刷题}
      - VITE_WECHAT_APPID=${VITE_WECHAT_APPID}
    volumes:
      - ./miniprogram:/app
      - qa-node-modules-mini:/app/node_modules
      - qa-npm-cache:/root/.npm
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.qa.service=miniprogram"
      - "com.qa.description=MiniProgram web interface"

  # Redis 缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: qa-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - qa-redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.qa.service=redis"
      - "com.qa.description=Redis cache server"

# 网络配置
networks:
  qa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.qa.network=main"
      - "com.qa.description=Main application network"

# 数据卷配置
volumes:
  # Go 相关缓存
  qa-go-cache:
    driver: local
    labels:
      - "com.qa.volume=go-cache"
      - "com.qa.description=Go modules cache"
  
  qa-go-build:
    driver: local
    labels:
      - "com.qa.volume=go-build"
      - "com.qa.description=Go build cache"
  
  # Node.js 相关缓存
  qa-node-modules-admin:
    driver: local
    labels:
      - "com.qa.volume=node-modules-admin"
      - "com.qa.description=Admin web node_modules"
  
  qa-node-modules-mini:
    driver: local
    labels:
      - "com.qa.volume=node-modules-mini"
      - "com.qa.description=MiniProgram node_modules"
  
  qa-npm-cache:
    driver: local
    labels:
      - "com.qa.volume=npm-cache"
      - "com.qa.description=NPM cache"
  
  # Redis 数据
  qa-redis-data:
    driver: local
    labels:
      - "com.qa.volume=redis-data"
      - "com.qa.description=Redis persistent data"

# 扩展配置
x-common-variables: &common-variables
  TZ: Asia/Shanghai
  LANG: C.UTF-8
  LC_ALL: C.UTF-8

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped

# 开发环境覆盖配置
# 使用方式: docker-compose -f docker-compose.windows.yml -f docker-compose.dev.yml up